import datetime
import os
import threading
import time
from dotenv import load_dotenv
import requests
dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
import logging
from fetchingdata import add_signal, block_user, check_user_status, get_all_requested_users, get_all_unblocked_users, get_new_signals, get_or_create_user, request_signal, reset_signal_request

import telebot
from telebot import types

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

courses = dict()
user_states = {}
user_photos = {}
bot_token = os.getenv("TG_TOKEN")
bot = telebot.TeleBot(bot_token)

def handle_photo(message,text):
   
    
    text_of_message,date_of_start,date_of_end = text.split("+")
    date_of_st = date_of_start.split(":")
    date_of_en = date_of_end.split(":")
    dt = datetime.datetime(int(date_of_st[0]), int(date_of_st[1]), int(date_of_st[2]), int(date_of_st[3]), int(date_of_st[4]))
    de = datetime.datetime(int(date_of_en[0]), int(date_of_en[1]), int(date_of_en[2]), int(date_of_en[3]), int(date_of_en[4]))
    
    try:

        add_signal(message.photo[-1].file_id, text_of_message, dt, de)
        bot.send_message(chat_id=message.chat.id, text="–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω")
    except e:
        print(e)
def create_keyboard_with_courses():
    markup = types.InlineKeyboardMarkup()
    
    markup.add(types.InlineKeyboardButton(text="üìà–ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥", callback_data="getsignal"))
    markup.add(types.InlineKeyboardButton(text="üí¨–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="support"))
    markup.add(types.InlineKeyboardButton(text="üë®‚Äçüíª–ü–æ–º–æ—â—å/FAQ", callback_data="course-"))
    return markup



@bot.message_handler(func=lambda message: True)
def echo_message(message):
    user_id = message.chat.id
    
    if message.text.lower() == "/start":
        start(message)
        user_states[user_id] = "NORMAL"  
    else:
        if message.chat.id == -1001511072724:
            if message.text == "/createsignal":
                bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é,—Ç–µ–∫—Å—Ç/year:month:day:hour:minute/year:month:day:hour:minute" )
                user_states[user_id] = "WAITING_FOR_PHOTO"

@bot.message_handler(content_types=['photo'])
def handle_message_with_photo(message):
    user_id = message.chat.id
    
    print(user_states)
    if user_states.get(user_id) == "WAITING_FOR_PHOTO":
        if message.caption:
            handle_photo(message, message.caption)

        user_states[user_id] = "NORMAL"
    if user_states.get(user_id) == "WAITING_FOR_FIRST_SCREEN":
        markup = types.InlineKeyboardMarkup()
        markup.add()
        markup.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"fscreen-accept-{user_id}"))
        markup.add(types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"fscreen-decline-{user_id}"))
        markup.add(types.InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"fscreen-userblock-{user_id}"))
        bot.send_photo(chat_id=-1001511072724, photo=message.photo[-1].file_id, reply_markup=markup)
        bot.send_message(chat_id = user_id, text = "–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    if user_states.get(user_id) == "WAITING_FOR_SECOND_SCREEN":
        if user_id not in user_photos:
            user_photos[user_id] = [] 
        if len(user_photos[user_id]) <= 1:
            
            user_photos[user_id].append(message.photo[-1].file_id)
        if len(user_photos[user_id]) >= 2:
            markup = types.InlineKeyboardMarkup()
            markup.add()
            markup.add(types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"fscreen-accept-{user_id}"))
            markup.add(types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"fscreen-decline-{user_id}"))
            markup.add(types.InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"fscreen-userblock-{user_id}"))
            bot.send_photo(chat_id=-1001511072724, photo=user_photos[user_id][0])
            bot.send_photo(chat_id=-1001511072724, photo=user_photos[user_id][1], reply_markup=markup)
            bot.send_message(chat_id = user_id, text = "–°–∫—Ä–∏–Ω—à–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
def start(message):
    user_id = message.chat.id
    user = get_or_create_user(user_id)
    markup = create_keyboard_with_courses()
    bot.send_message(chat_id=message.chat.id, text=f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MarketView_Bot.\n\n"+
    "‚ñ™Ô∏è –ù–∞—à –æ–±—â–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª - @MarketView_Official.\n"+
    "‚ñ™Ô∏è –°–≤–∏–Ω–≥ —Ç—Ä–µ–π–¥–∏–Ω–≥, —Å–∫–∞–ª—å–ø–∏–Ω–≥, —Å–ø–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, Smart Money –∞–Ω–∞–ª–∏–∑ –∏ –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ—ã —Å—Ä–∞–∑—É –≤ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ!\n" +
    "‚ñ™Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø.\n"+
    "–ù–µ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ö–∞–Ω–∞–ª, —ç—Ç–æ –Ω–µ –≤—ã–≥–æ–¥–Ω–æ –∏ –Ω–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–π –æ–∫—É–ø–∞!\n" + 
    "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n\n"+
    "- –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Binance (–∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—Ä–∏–ø—Ç–æ –±–∏—Ä–∂–∏)\n"+
    "- –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –±–æ—Ç–∞.\n"+
    "- –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–æ–º –æ—Ä–¥–µ—Ä–µ.\n"+
    "- —Å–∫–∏–¥—ã–≤–∞–µ—Ç–µ 50% –ø—Ä–∏–±—ã–ª–∏ –≤ USDT —á–µ—Ä–µ–∑ —Å–µ—Ç—å TRC20.\n"+
    "- –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞: —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.", reply_markup=markup)
    #bot.send_message(chat_id=message.chat.id, text=f"{message.chat.id}–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫—É—Ä—Å:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    prefix = call.data.split("-")
    user_id = call.message.chat.id
    
    if prefix[0] == "getsignal":
        check = check_user_status(user_id)
        if check:
            if user_states[user_id] == "WAITING_FOR_FIRST_SCREEN":
                bot.send_message(chat_id=user_id, text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω –∑–∞—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é")
            elif user_states[user_id] == "WAITING_FOR_SECOND_SCREEN":
                bot.send_message(chat_id=user_id, text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥")
            else:
                request_signal(user_id)
                bot.send_message(chat_id=user_id, text="‚úÖ –ë–æ—Ç –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ Market View –Ω–∞–π–¥–µ—Ç —Ö–æ—Ä–æ—à—É—é —Å–∏—Ç—É–∞—Ü–∏—é –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ä—ã–Ω–∫–µ - –ë–æ—Ç —Å–∫–∏–Ω–µ—Ç –≤–∞–º –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç:\n"
                + "\n- –≥—Ä–∞—Ñ–∏–∫.\n- —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n- –≤—Ö–æ–¥, take profit, stop loss.")
        else:
            bot.send_message(chat_id = user_id, text = "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã! –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª—è—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    elif prefix[0] == "reject":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"/start"))
        bot.send_message(chat_id=course_title, text="–í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.",  reply_markup=markup)
    elif prefix[0] == "fscreen" and prefix[1] == "accept":
        bot.send_message(chat_id=prefix[2], parse_mode="MARKDOWN",  text="–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏!\n–¢–∞–∫–∂–µ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 20% –æ—Ç –ø—Ä–∏–±—ã–ª–∏\n–°–µ—Ç—å: Tron (TRC20)\n–ê–¥—Ä–µ—Å: `TBputbak1tfsJ3CThQjtReEu23aydRbYcG`")
        
        user_states[int(prefix[2])] = "WAITING_FOR_SECOND_SCREEN"
    elif prefix[0] == "fscreen" and prefix[1] == "decline":
        bot.send_message(chat_id=prefix[2], text="–í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é –Ω–µ –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω.")
    elif prefix[0] == "fscreen" and prefix[1] == "userblock":
        bot.send_message(chat_id=prefix[2], text = "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∞–ø–µ–ª—è—Ü–∏—é –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        

@bot.message_handler(commands=['help'])
def help_command(message):
    """Displays info on how to use the bot."""
    bot.send_message(chat_id=message.chat.id, text="–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.")


def send_signal_to_all_unblocked_users():
    last_check_time = datetime.datetime.now()
    
    while True:
        time.sleep(1) 
        
        new_signals = get_new_signals(last_check_time) 
        last_check_time = datetime.datetime.now()
        for signal in new_signals: 
            all_unblocked_users = get_all_requested_users()  
            for user in all_unblocked_users:
                try:
                    
                    dt = signal["start_date"].strftime('%Y_%m_%d-%H:%M')
                    de = signal["end_date"].strftime('%Y_%m_%d-%H:%M')
                    markup = create_keyboard_with_courses()
                    bot.send_photo(chat_id=user['id'], photo=signal['image'])

                    bot.send_message(chat_id=user['id'], text=signal["text"] + "\n" + dt + ' - ' + de + "(UTC+3)" , reply_markup=markup)
                    bot.send_message(chat_id=user['id'], text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é")
                    user_states[user['id']] = "WAITING_FOR_FIRST_SCREEN"
                    reset_signal_request(user['id'])
                    #block_user(user['id'])
                    

                except telebot.apihelper.ApiException:
                    print("Error 108")
                    #mark_user_as_blocked(user)  

if __name__ == "__main__":
    while True:
        try:
            threading.Thread(target=send_signal_to_all_unblocked_users).start()
            bot.infinity_polling()
            
        except Exception as e:
            print(f"An exception occurred: {e}. Sleeping for a while before retrying...")
            time.sleep(10)